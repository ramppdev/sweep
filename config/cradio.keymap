// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <150>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        moto: mo_to_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TO_LAYER";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "hold-preferred";
        };

        tokp: to_kp_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_KP_LAYER";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };

        mokp: mokp {
            compatible = "zmk,behavior-hold-tap";
            label = "MOKP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "hold-preferred";
        };

        mod_comma: mod_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_COMMA";
            bindings = <&kp DE_COMMA>, <&kp DE_SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_dot: mod_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_DOT";
            bindings = <&kp DE_DOT>, <&kp DE_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_comma_dot: ht_comma_dot {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_COMMA_DOT";
            bindings = <&mod_comma>, <&mod_dot>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };

        safe_bt_clr: safe_bt_clr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            require-prior-idle-ms = <400>;
            bindings = <&MA_CLR>, <&none>;

            label = "SAFE_BT_CLR";
        };

        safe_boot: safe_boot {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            require-prior-idle-ms = <400>;
            bindings = <&bootloader>, <&none>;

            label = "SAFE_BOOT";
        };

        rp_tp: rp_tp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&key_repeat>;

            label = "RP_TP";
        };

        kptp_htp: kptp_htp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            label = "KPTP_HTP";
        };

        tdmokp: tdmokp {
            compatible = "zmk,behavior-tap-dance";
            label = "TDMOKP";
            #binding-cells = <0>;
            bindings = <&mokp 1 TAB>, <&kp ESCAPE>;

            tapping-term-ms = <150>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        CO_LPB {
            bindings = <&kp DE_LPAR>;
            key-positions = <2 3>;
            layers = <0 1>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        CO_RPB {
            bindings = <&kp DE_RPAR>;
            key-positions = <6 7>;
            layers = <0 1>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        CO_LSB {
            bindings = <&kp DE_LBKT>;
            key-positions = <12 13>;
            layers = <0 1>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        CO_RSB {
            bindings = <&kp DE_RBKT>;
            key-positions = <16 17>;
            layers = <0 1>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        CO_LCB {
            bindings = <&kp DE_LEFT_BRACE>;
            key-positions = <22 23>;
            layers = <0 1>;
            timeout-ms = <80>;
            require-prior-idle-ms = <100>;
        };

        CO_RCB {
            bindings = <&kp DE_RIGHT_BRACE>;
            key-positions = <26 27>;
            layers = <0 1>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        CO_LLT {
            bindings = <&kp DE_LESS_THAN>;
            key-positions = <3 4>;
            layers = <0 1>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        CO_RGT {
            bindings = <&kp DE_GREATER_THAN>;
            key-positions = <5 6>;
            layers = <0 1>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        CO_MO_LAY_3 {
            bindings = <&mokp 3 ESCAPE>;
            key-positions = <30 33>;
            timeout-ms = <120>;
            require-prior-idle-ms = <100>;
            layers = <0 2 3 1>;
        };

        CO_CMD_BSP {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <31 32>;
            timeout-ms = <120>;
            require-prior-idle-ms = <100>;
            layers = <0 2 3 1>;
        };

        CO_LAY_1 {
            bindings = <&to 1>;
            key-positions = <30 31>;
            timeout-ms = <120>;
            require-prior-idle-ms = <100>;
            layers = <0 2 3 1>;
        };

        CO_LAY_2 {
            bindings = <&to 2>;
            key-positions = <32 33>;
            timeout-ms = <120>;
            require-prior-idle-ms = <100>;
            layers = <0 2 3 1>;
        };

        CO_LAY_3 {
            bindings = <&to 3>;
            key-positions = <32 33 31 30>;
            timeout-ms = <120>;
            require-prior-idle-ms = <100>;
            layers = <0 2 3 1>;
        };
    };

    macros {
        MA_CLR: MA_CLR_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_CLR>;
            label = "MA_CLR_0";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&ht DE_AT Q  &kp W        &ht DE_EURO E  &kp R        &kp T                         &kp DE_Z       &kp U          &kp I            &kp O            &ht DE_CAPITAL_SHARP_S P
&kp A        &mt LCTRL S  &mt LWIN D     &mt LALT F   &kp G                         &kp H          &mt LALT J     &mt LWIN K       &mt LCTRL L      &kp DE_U_UMLAUT
&kp DE_Y     &kp X        &kp C          &kp V        &kp B                         &kp N          &kp M          &kp DE_O_UMLAUT  &kp DE_A_UMLAUT  &ht_comma_dot 0 0
                                         &mokp 1 TAB  &kptp_htp LSHIFT BACKSPACE    &tokp 0 SPACE  &mokp 2 ENTER
            >;
        };

        num_sym {
            bindings = <
&kp N1                   &kp N2                       &kp N3     &kp N4       &kp N5                      &kp N6        &kp N7                 &kp N8             &kp N9              &kp N0
&ht DE_CARET EXCL        &ht DE_SQT DE_DOUBLE_QUOTES  &kp DLLR   &kp DE_AMPS  &kp DE_SLASH                &kp DE_PLUS   &mt LEFT_ALT DE_ASTRK  &mt LWIN DE_EQUAL  &mt LCTRL DE_COMMA  &mt LEFT_SHIFT DE_DOT
&ht DE_SECT DE_QUESTION  &ht DE_ACUTE DE_GRAVE        &kp PRCNT  &kp DE_HASH  &ht DE_PIPE DE_BACKSLASH    &kp DE_MINUS  &kp DE_UNDER           &kp DE_TILDE       &kp DE_SEMI         &kp DE_COLON
                                                                 &trans       &trans                      &trans        &trans
            >;
        };

        nav {
            bindings = <
&kp ESC             &none      &none      &kp INS    &kp DEL         &kp PG_UP        &kp HOME          &kp UP    &kp END            &kp BACKSPACE
&mt LEFT_SHIFT TAB  &kp LCTRL  &kp LWIN   &kp LALT   &kp RALT        &kp PG_DN        &kp LEFT          &kp DOWN  &kp RIGHT          &kp RET
&kp LC(DE_Y)        &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(DE_Z)    &kp LA(LC(TAB))  &kp LC(LA(LEFT))  &none     &kp LC(LA(RIGHT))  &kp LA(TAB)
                                          &trans     &trans          &trans           &trans
            >;
        };

        func {
            bindings = <
&kp F1            &kp F2     &kp F3                   &kp F4               &kp F5                     &kp F6        &kp F7        &kp F8           &kp F9  &kp F10
&kp LEFT_SHIFT    &kp LCTRL  &kp LWIN                 &kp LALT             &kp RALT                   &kp F11       &kp F12       &kp PRINTSCREEN  &none   &none
&safe_bt_clr 0 0  &none      &ht C_PREVIOUS C_VOL_DN  &ht C_NEXT C_VOL_UP  &ht C_PLAY_PAUSE C_MUTE    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &none   &safe_boot 0 0
                                                      &trans               &trans                     &trans        &trans
            >;
        };
    };
};
